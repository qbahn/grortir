from unittest import TestCase
from unittest.mock import patch

import networkx as nx
import numpy as np

from grortir.main.model.processes.factories.calls_process_factory import \
    CallsProcessFactory
from grortir.main.optimizers.grouped_optimizer import GroupedOptimizer
from grortir.main.optimizers.grouping_strategy import GroupingStrategy
from grortir.main.pso.calls_optimization_strategy import \
    CallsOptimizationStrategy
from grortir.main.pso.pso_algorithm import PsoAlgorithm


def prepare_rand_mock(rand_mock):
    """Rand mock for:
        3 particles
        5 stages
        2 dimensions
    """
    returned_values = [  # rand_vec - positions particle 1
        [0.076308289373957, 0.723465177830941],
        [0.501120463659938, 0.499882500825560],
        [0.380941133148538, 0.909593527719614],
        [0.931206019689022, 0.950129500413646],
        [0.909128374886731, 0.750409859102035],

        # rand_vec - initial_velocities particle 1
        [0.204849090297795, 0.477401154851588],
        [0.768647506519509, 0.276049048330695],
        [0.657399462779758, 0.719324122509042],
        [0.180451619202682, 0.426453572684942],
        [0.414885978439443, 0.709394393725213],

        # rand_vec - positions particle 2
        [0.779918792240115, 0.977989511996603],
        [0.072051133359762, 0.679229996120940],
        [0.065936346905905, 0.213385353579916],
        [0.024899227550348, 0.230302879020965],
        [0.133169445759250, 0.669013240883914],

        # rand_vec - initial_velocities particle 2
        [0.490765889091070, 0.365890385780593],
        [0.313994677212662, 0.452842932546400],
        [0.370351082988035, 0.412991829113835],
        [0.741118872913264, 0.634379868633839],
        [0.001426880562758, 0.524345596765197],

        # rand_vec - positions particle 3
        [0.438409231440893, 0.538495870410434],
        [0.268438980101871, 0.803739036104375],
        [0.288145599307994, 0.452123961817683],
        [0.600548917464123, 0.548489919236030],
        [0.523412580673766, 0.467752859744981],

        # rand_vec - initial_velocities particle 3
        [0.372384689385059, 0.837917994309261],
        [0.572625332643954, 0.352978365944395],
        [0.459092977891431, 0.906423269164339],
        [0.422374043643140, 0.522906201028345],
        [0.092262345846752, 0.696160463516969],

        # rand_1
        0.955468323002926,
        # rand_2
        0.682913854375418,
        # itd.
        0.053128690672958,
        0.308852684863797,
        0.592594687323373,
        0.235120407257464,
        0.964970999536127,
        0.945048223792794,
        0.848400880837689,
        0.472323996288402,
        0.841476714898397,
        0.131110642347914,
        0.308733657297835,
        0.462996394154417,
        0.741847200683467,
        0.485825228708897,
        0.136876118797451,
        0.343536529704358,
        0.324426169672443,
        0.300418904318040,
        0.165501400465787,
        0.414901772573252,
        0.448120657502723,
        0.774900375814017,
        0.796390700782548,
        0.522390128001612,
        0.460630296163277,
        0.778213601543897,
        0.887288951852735,
        0.674918769866788,
        0.800479048998464,
        0.939111353732185,
        0.040655809436686,
        0.875671724870083,
        0.276563072451134,
        0.475764499424244,
        0.796760956931902,
        0.717242232275230,
        0.147147571941693,
        0.658748258954145,
        0.069252070009835,
        0.357070628352879,
        0.812829550163706,
        0.427704833027551,
        0.599854437543446,
        0.728161283147134,
        0.821227608306559,
        0.760515119980283,
        0.007143275278998,
        0.420256833672535,
        0.463136218038147,
        0.055499503112723,
        0.541442132095220,
        0.607770751443867,
        0.828453194996125,
        0.941809268191449,
        0.128147854002733,
        0.230430674410219,
        0.659158397070561,
        0.132473988816749,
        0.224078636946319,
        0.574862587589149,
        0.169523723566209,
        0.782230151323778,
        0.856975626111760,
        0.033674204502848,
        0.532644804943674,
        0.796951357443564,
        0.975139681157116,
        0.274258593194421,
        0.169101063365383,
        0.876700930181635,
        0.909182463760849,
        0.197532889467157,
        0.441529742702640,
        0.719232141692337,
        0.845345158763973,
        0.168275305367244,
        0.664968962904761,
        0.807835459296069,
        0.549714120800727,
        0.164716658779013,
        0.035528804830363,
        0.281533817848494,
        0.807870846453552,
        0.044766260845139,
        0.008216505039312,
        0.361616647712057,
        0.063622285698552,
        0.149486303324230,
        0.023190368099362,
        0.524719836768632,
        0.696695902189413,
        0.427053493013728,
        0.134570458644688,
        0.331357210962406,
        0.590345854306335,
        0.940661393396388,
        0.992557719172640,
        0.241602916653850,
        0.010579906938346,
        0.830640325993805,
        0.926612937770057,
        0.458603479767969,
        0.771442344563682,
        0.866199034084391,
        0.609614798334559,
        0.872627183144187,
        0.023903026142331,
        0.271595220259564,
        0.277219582694295,
        0.120632428306158,
        0.910713454288238,
        0.030439266665623,
        0.672561029522113,
        0.071339687257207,
        0.360780493785221,
        0.418099542677566,
        0.181404289057367,
        0.521014103282176,
        0.534991760927916,
        0.317043881936196,
        0.737088059552291,
        0.160202410619170,
        0.192508218959855,
        0.354511018045606,
        0.378376133431419,
        0.206285856500654,
        0.918709205142268,
        0.828093569546948,
        0.106876744256641,
        0.369485915660384,
        0.232671095631974,
        0.451078602950542,
        0.276317186210793,
        0.501806891118423,
        0.922603153077957,
        0.382511138929834,
        0.650128328628633,
        0.595621113020374,
        0.751953561142208,
        0.061665330169869,
        0.744823673681810,
        0.946275927172428,
        0.603559551695486,
        0.287579942119900,
        0.672369218429286,
        0.712048786781395,
        0.656450286538602,
        0.146930315693544,
        0.973475568269701,
        0.955383451820879,
        0.424625532795641,
        0.593637329408872,
        0.039628573866894,
        0.988634334561939,
        0.818744992623299,
        0.636502342429667,
        0.761084744221686,
        0.188029928582586,
        0.307654590092852,
        0.246393644285721,
        0.596049120125150,
        0.091904852163772,
        0.895609985214942,
        0.462275942130728,
        0.444812364954379,
        0.104711303573244,
        0.684904037060114,
        0.816893994342448,
        0.629550171462332,
        0.242022607464133,
        0.785420721585510,
        0.145679433383434,
        0.827276328979597,
        0.580705370611886,
        0.289372811578436,
        0.513243399843739,
        0.628851403064647,
        0.258589498592646,
        0.846906560459974,
        0.421253708599273,
        0.892337457255232,
        0.835468561147535,
        0.099347514159631,
        0.646254109448792,
        0.310494566495742,
        0.754053196983175,
        0.542631657447731,
        0.457598874651717,
        0.895366784537062,
        0.057253559800168,
        0.557317625867979,
        0.327911099296676,
        0.035273336313463,
        0.753518518702918,
        0.561740656068876,
        0.894145336956216,
        0.598261227571831,
        0.337034279430268,
        0.985219655379547,
        0.115714050609305,
        0.052601742578789,
        0.732621909452081
    ]

    returned_values_arrays = []
    for row in returned_values:
        returned_values_arrays.append(np.array(row))

    rand_mock.side_effect = returned_values_arrays


class TestLinearRVT(TestCase):
    @patch('grortir.main.pso.velocity_calculator.np.random.rand')
    def test_RVT_mocked(self, rand_mock):
        """Test use some mocked values of random function from one known example from matlab.
         Because we set the same values in rand function, we should have equal values as in matlab.
         This is working example for 3 particles, 5 stages, 2 dimensions when all stages are in one group.
         """
        prepare_rand_mock(rand_mock)
        how_many_particles = 3
        calls_factory = CallsProcessFactory("linear", 5,
                                            3,
                                            [0, 0])
        process = calls_factory.construct_process()

        ordered_stages = nx.topological_sort(process)

        # process = CallsProcess()
        # stage = CallsStage("stage_name", 1000, [0])
        # process.add_node(stage)
        # ordered_stages = [stage]

        grouping_strategy = GroupingStrategy(ordered_stages)
        grouping_strategy.define_group(ordered_stages)
        optimization_startegy = CallsOptimizationStrategy()

        pso_algortihm = PsoAlgorithm(process, grouping_strategy,
                                     optimization_startegy,
                                     how_many_particles)
        optimizer = GroupedOptimizer(process, grouping_strategy, pso_algortihm)

        optimizer.optimize_process()

        optimizer.result
